" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

set nocompatible
set encoding=utf8
set fileformat=unix
set modelines=0
set autoindent
set showcmd
set hidden
set visualbell
set ttyfast
set ruler
set backspace=indent,eol,start
set number
set laststatus=2
set history=1000
set undoreload=10000
set shell=zsh
set lazyredraw
set matchtime=3
set showbreak=↪
set splitbelow
set splitright
set fillchars=diff:⣿,vert:│
set autowrite
set autoread
set shiftround
set title
set linebreak
set cursorline
set tabpagemax=50
set noshowmode
let mapleader = ","

" Column highlight
set colorcolumn=+1
let &colorcolumn="+1,".join(range(120,999),",")

set ttimeout
set ttimeoutlen=50

" Remember vim status on close
set viminfo='100,<1000,s100,%,:5

" scrolling
set scrolloff=3
set sidescroll=1
set sidescrolloff=10

"Set font type and size. Depends on the resolution. Larger screens, prefer h20
set guifont=Inconsolata\ for\ Powerline:h16

" Better Completion
set completeopt=longest,menuone,preview

" Resize splits when the window is resized
au VimResized * :wincmd =
"
" tabs and spaces
set expandtab
set smarttab
set tabstop=8
set softtabstop=4
set shiftwidth=4
au BufNewFile,BufReadPost *.css,*.html,*.mako,*.rb,*.erb,*.coffee,*.js,*.json set shiftwidth=2

" other visuals
set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files

" folds
set foldlevel=0

"Better line wrapping
set wrap
set textwidth=80
set formatoptions=qrn1

" search
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch

" Press Space to turn off highlighting and clear any message already displayed.
:nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" Spellcheck with vim (set spell / set nospell)
set dictionary=/usr/share/dict/words
set spellfile=~/.vim/custom-dictionary.utf-8.add
syn spell toplevel

" Automatically reload vimrc
autocmd! bufwritepost vimrc source ~/.config/nvim/vimrc

" Other mappings
nnoremap Y y$
map <C-j> :bn<cr>
map <C-k> :bp<cr>

" Backups
set undodir=~/.config/nvim/tmp/undo//     " undo files
set backupdir=~/.config/nvim/tmp/backup// " backups
set directory=~/.config/nvim/tmp/swap//   " swap files
set undofile
set backup                        " enable backups
set noswapfile                    " It's 2012, Vim.

" Use the below highlight group when displaying bad whitespace is desired
highlight BadWhitespace ctermbg=red guibg=red

" Make trailing whitespace be flagged as bad.
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/

" shortcuts and abbreviations
abbreviate pdbst import pdb;pdb.set_trace()
abbreviate lorem Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
" Remove whitespace on lines end
nnoremap <leader>w :%s/\s\+$//<cr>:let @/=''<CR>
"
" Toggle [i]nvisible characters
nnoremap <leader>i :set list!<cr>
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮

" Emacs bindings in command line mode
cnoremap <c-a> <home>
cnoremap <c-e> <end>

if has('gui_running')

    " Remove all the UI cruft
    set go-=T
    set go-=l
    set go-=L
    set go-=r
    set go-=R
    set foldenable
    set so=7

    " only blink the cursor on input mode
    set guicursor=n-v-c:blinkon0
    set guicursor+=i:blinkwait10

    if has("gui_macvim")
        " Full screen means FULL screen
        set fuoptions=maxvert,maxhorz

        map <D-Return> :set invfu<CR>

        " Use the normal HIG movements, except for M-Up/Down
        let macvim_skip_cmd_opt_movement = 1
        no   <D-Left>       <Home>
        no!  <D-Left>       <Home>
        no   <M-Left>       <C-Left>
        no!  <M-Left>       <C-Left>

        no   <D-Right>      <End>
        no!  <D-Right>      <End>
        no   <M-Right>      <C-Right>
        no!  <M-Right>      <C-Right>

        no   <D-Up>         <C-Home>
        ino  <D-Up>         <C-Home>
        imap <M-Up>         <C-o>{

        no   <D-Down>       <C-End>
        ino  <D-Down>       <C-End>
        imap <M-Down>       <C-o>}

        imap <M-BS>         <C-w>
        inoremap <D-BS>     <esc>my0c`y
    else
        " Non-MacVim GUI, like Gvim
    end
else
    " Console Vim
    " For me, this means iTerm2, possibly through tmux
    " Mouse support
    set mouse=a
endif

" Use Node.js for JavaScript interpretation
let $JS_CMD='node'

call plug#begin('~/.vim/plugged')

Plug 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make -f make_mac.mak',
\     'linux' : 'make',
\     'unix' : 'gmake',
\    },
\ }
Plug 'flazz/vim-colorschemes'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'kien/ctrlp.vim'
Plug 'mbbill/undotree'
Plug 'majutsushi/tagbar'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'myusuf3/numbers.vim'
Plug 'msanders/snipmate.vim'
Plug 'tristen/vim-sparkup'
Plug 'ervandew/supertab'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-git'
Plug 'tpope/vim-haml'
Plug 'tpope/vim-markdown'
Plug 'avakhov/vim-yaml'
Plug 'JamshedVesuna/vim-markdown-preview'
Plug 'jmcantrell/vim-virtualenv'
Plug 'sophacles/vim-bundle-mako'
Plug 'jnwhiteh/vim-golang'
Plug 'pangloss/vim-javascript'
Plug 'kchmck/vim-coffee-script'
Plug 'vim-scripts/vim-json-bundle'
Plug 'derekwyatt/vim-scala'
Plug 'rizzatti/funcoo.vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'rking/ag.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'chrisbra/NrrwRgn'
Plug 'Lokaltog/vim-easymotion'
Plug 'maxbrunsfeld/vim-yankstack'
Plug 'godlygeek/tabular'
Plug 'tommcdo/vim-exchange'
Plug 'sickill/vim-pasta'
Plug 'tmux-plugins/vim-tmux'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'regedarek/ZoomWin'
Plug 'davidhalter/jedi-vim'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'zchee/deoplete-jedi'
Plug 'hynek/vim-python-pep8-indent'
Plug 'benmills/vimux'
Plug 'mattn/emmet-vim'
Plug 'Chiel92/vim-autoformat'
Plug 'ryanoasis/vim-devicons'

let g:deoplete#enable_at_startup = 1
if has("mac")
    Plug 'rizzatti/dash.vim'
    if !has('nvim')
        set macmeta
    endif
endif
call plug#end()

filetype plugin indent on " Keep below neobundle#end!!!

" Airline
let g:airline_powerline_fonts=1
let g:airline_theme='solarized'
let g:airline_exclude_filenames = ['DebuggerWatch', 'DebuggerStack', 'DebuggerStatus']
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:bufferline_echo=0

" Jedi
let g:jedi#use_splits_not_buffers = "left"
let g:jedi#popup_on_dot = 1


" syntastic tweaks
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_enable_balloons = 0
" close preview window (used for docs) once insert is done
autocmd InsertLeave * :pc

" tagbar config
let g:tagbar_autoshowtag = 1

" Indent guides
" let g:indent_guides_enable_on_vim_startup = 0
" let g:indent_guides_color_change_percent = 2
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=base03
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=black


" Dash
nmap <silent> <leader>d <Plug>DashSearch

" CtrlP
set runtimepath^=~/.vim/bundle/ctrlp.vim

"Color scheme
let g:solarized_hitrail=1    "default value is 0
syntax enable
set background=dark
colorscheme solarized
let g:solarized_termcolors=256
let g:solarized_menu=0

" Undotree window
nnoremap <leader>u :UndotreeToggle<CR>
" Tagbar window
nnoremap <leader>t :TagbarToggle<CR>
" Ag for the last search.
let g:ag_working_path_mode="r"
nnoremap <silent> <leader>ag :execute "AgFromSearch!"<CR>

" nerdtree
nnoremap <leader>n :NERDTreeToggle<CR>

map <Leader>s <Plug>(easymotion-s2)

" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" nmap <unique> <c-w>z  <Plug>ZoomWin
"
" Markdown preview
let vim_markdown_preview_hotkey='<C-m>'
let vim_markdown_preview_github=1
let g:virtualenv_auto_activate=1
